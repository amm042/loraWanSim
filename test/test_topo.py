"""
Test by running unittest discover in the root folder.
$ python3 -m unittest discover
"""

import unittest

class BasicTopoTests(unittest.TestCase):
    def test_grid(self):
        import utils.grid
        nodes = list(utils.grid.grid(42, radius=101))
        baseline =   [(1, 0.0, 0.0), (2, 0.0, -25.25), (3, -25.25, 0.0),
                     (4, 25.25, 0.0), (5, 0.0, 25.25), (6, -25.25, -25.25),
                     (7, 25.25, -25.25), (8, -25.25, 25.25), (9, 25.25, 25.25),
                     (10, 0.0, -50.5), (11, -50.5, 0.0), (12, 50.5, 0.0),
                     (13, 0.0, 50.5), (14, -25.25, -50.5), (15, 25.25, -50.5),
                     (16, -50.5, -25.25), (17, 50.5, -25.25), (18, -50.5, 25.25),
                     (19, 50.5, 25.25), (20, -25.25, 50.5), (21, 25.25, 50.5),
                     (22, -50.5, -50.5), (23, 50.5, -50.5), (24, -50.5, 50.5),
                     (25, 50.5, 50.5), (26, 0.0, -75.75), (27, -75.75, 0.0),
                     (28, 75.75, 0.0), (29, 0.0, 75.75), (30, -25.25, -75.75),
                     (31, 25.25, -75.75), (32, -75.75, -25.25),
                     (33, 75.75, -25.25), (34, -75.75, 25.25),
                     (35, 75.75, 25.25), (36, -25.25, 75.75),
                     (37, 25.25, 75.75), (38, -50.5, -75.75),
                     (39, 50.5, -75.75), (40, -75.75, -50.5),
                     (41, 75.75, -50.5), (42, -75.75, 50.5)]
        for a,b in zip(nodes, baseline):
            c,d,e=a
            f,g,h=b
            self.assertEqual(c,f)
            self.assertAlmostEqual(d,g)
            self.assertAlmostEqual(e,h)
    def test_rand(self):
        import utils.rand
        nodes = list(utils.rand.rand(14, radius=101, seed=1234))
        baseline = [(1, -72.84700501833038, 68.23949135176123),
                    (2, -7.1231785766858735, 96.784787841844),
                    (3, 42.05565768911892, 38.554257212646206),
                    (4, -20.729995449332232, 45.12787659686998),
                    (5, -8.494767425194645, 98.80491539623152),
                    (6, -51.714840179619, -42.711576372973326),
                    (7, 61.51963019168495, -70.88819328624828),
                    (8, -44.514275957460775, -70.02102193958088),
                    (9, 14.758881309788931, 85.36767364175161),
                    (10, 28.759092030549944, -30.465747575049473),
                    (11, -10.023645177680718, -22.649525063126895),
                    (12, -63.42007138901604, -53.15255006363686),
                    (13, 24.52691330868019, -3.4483693181529156),
                    (14, -65.51751996250948, -13.608825166269668)]
        for a,b in zip(nodes, baseline):
            c,d,e=a
            f,g,h=b
            self.assertEqual(c,f)
            self.assertAlmostEqual(d,g)
            self.assertAlmostEqual(e,h)
    def test_sunflower(self):
        import utils.sunflower
        nodes = list(utils.sunflower.sunflower(8, radius=16))
        
        baseline = [(1, -3.4057609620045626, 3.119956025814963),
                    (2, 0.699405797735679, -7.969368326918622),
                    (3, 6.283929535350779, 8.196273315441161),
                    (4, -12.033397558137969, -2.1285385928219673),
                    (5, 11.691416318162629, -7.437122055970344),
                    (6, -4.1536688784238445, 15.451441190012446),
                    (7, -7.374512395413907, -14.199174867924073),
                    (8, 15.02914074118589, 5.488618093985632)]

        for a,b in zip(nodes, baseline):
            c,d,e=a
            f,g,h=b
            self.assertEqual(c,f)
            self.assertAlmostEqual(d,g)
            self.assertAlmostEqual(e,h)
